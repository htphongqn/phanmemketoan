using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using DevComponents.DotNetBar;
using ketoansoft.app.Class.Data;
using DevExpress.XtraEditors;
using ketoansoft.app.Components.clsVproUtility;
using System.Collections;
using ketoansoft.app.Class.Global;
using System.Diagnostics;
using ketoansoft.app.Diaglog;

namespace ketoansoft.app
{
    public partial class DanhMucTaiKhoan : DevComponents.DotNetBar.Metro.MetroForm
    {
        private dbVstoreAppDataContext _db = new dbVstoreAppDataContext();
        private KTTKRepo _KTTKRepo = new KTTKRepo();
        private Unit _unit = new Unit();
        private List<int> _listUpdate = new List<int>();

        public DanhMucTaiKhoan()
        {
            InitializeComponent();
        }

        #region Data
        private void Load_Data()
        {
            try
            {
                gridData.DataSource = _KTTKRepo.GetAll();
            }
            catch (Exception) { }
        }
        private void Save_Data(bool msg)
        {
            try
            {
                int i = 0;
                foreach (int pos in _listUpdate)
                {
                    int id = Utils.CIntDef(gridView1.GetRowCellValue(pos, "ID").ToString(), 0);
                    KT_TK obj = _KTTKRepo.GetById(id);
                    if (obj != null)
                    {
                        obj.TEN_TK = Utils.CStrDef(gridView1.GetRowCellValue(pos, "TEN_TK"), "");
                        obj.VND_DU_NO = Utils.CDblDef(gridView1.GetRowCellValue(pos, "VND_DU_NO"), 0);
                        obj.VND_DU_CO = Utils.CDblDef(gridView1.GetRowCellValue(pos, "VND_DU_CO"), 0);
                        obj.VND_PS_NO = Utils.CDblDef(gridView1.GetRowCellValue(pos, "VND_PS_NO"), 0);
                        obj.VND_PS_CO = Utils.CDblDef(gridView1.GetRowCellValue(pos, "VND_PS_CO"), 0);
                        obj.VND_CK_NO = Utils.CDblDef(gridView1.GetRowCellValue(pos, "VND_CK_NO"), 0);
                        obj.VND_CK_CO = Utils.CDblDef(gridView1.GetRowCellValue(pos, "VND_CK_CO"), 0);
                        obj.DANH_DAU = Utils.CStrDef(gridView1.GetRowCellValue(pos, "DANH_DAU"), "");

                        _KTTKRepo.Update(obj);
                        i++;
                    }
                }
                _listUpdate = new List<int>();
                if (i > 0 && msg)
                {
                    MessageBox.Show("Lưu thành công!", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }            
        }
        private void Remove_Data()
        {
            try
            {
                //if (_listUpdate.Count > 0)
                //{
                //    MessageBox.Show("Hãy thực hiện lưu trước khi xóa!", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //    return;
                //}
                Save_Data(false);

                int Id = Utils.CIntDef(gridView1.GetRowCellValue(gridView1.FocusedRowHandle, "ID"), 0);
                _KTTKRepo.Remove(Id);
                Id = Utils.CIntDef(gridView1.GetRowCellValue(gridView1.FocusedRowHandle, "MA_TK"), 0);
                MessageBox.Show("Xóa dòng ID:" + Id + " thành công!", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Load_Data();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion

        #region Event
        private void gridData_Load(object sender, EventArgs e)
        {
            Load_Data();
        }
        private void gridView1_InvalidRowException(object sender, DevExpress.XtraGrid.Views.Base.InvalidRowExceptionEventArgs e)
        {
            // Sự kiện này để người ta không chuyển qua dòng khác được khi có lỗi xảy ra nè
            // Nó nhận giá trị e.Valid của gridView1_ValidateRow để ứng xử
            // neu e,Valid =True thì nó cho chuyển qua dòng khác hoặc làm tác vụ khác
            // và ngược lại
             e.ExceptionMode = DevExpress.XtraEditors.Controls.ExceptionMode.NoAction;
        }
        private void gridView1_CellValueChanged(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {
            BeginInvoke(new MethodInvoker(delegate
            {
                bool b = _listUpdate.Exists(a => a == gridView1.FocusedRowHandle);
                if (!b)
                {
                    _listUpdate.Add(gridView1.FocusedRowHandle);
                }
            }));
        }
        #endregion

        #region Button
        private void btnSave_Click(object sender, EventArgs e)
        {
            Save_Data(true);
        }
        private void buttonItem9_Click(object sender, EventArgs e)
        {
            //if (MessageBox.Show("Bạn có muốn thoát không?", "Hỏi", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
            //{
            //    Save_Data(false);
            //    this.Close();
            //}
            this.Close();
        }
        private void buttonItem1_Click(object sender, EventArgs e)
        {
            gridView1.ShowFindPanel();
        }
        private void buttonItem3_Click(object sender, EventArgs e)
        {
            ProcessStartInfo Info = new ProcessStartInfo();
            Info.FileName = "calc.exe";
            Process.Start(Info);
        }
        private void buttonItem8_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Bạn có chắc chắn xóa không?", "Hỏi", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
            {
                Remove_Data();
            }            
        }
        private void buttonItem5_Click(object sender, EventArgs e)
        {
            FocusCol();
        }
        #endregion
                
        #region Form function
        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            base.OnFormClosing(e);
            if (!e.Cancel)
            {
                if (MessageBox.Show("Bạn có muốn đóng form Tài Khoản không?", "Hỏi", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    e.Cancel = true;
                }
                else
                {
                    Save_Data(false);
                }
            }
        }
        #endregion

        #region Funtion
        private void FocusCol()
        {
            dlogToCol dialog = new dlogToCol(gridView1);
            dialog.ShowDialog();
            string _value = dialog.Result;
            gridView1.FocusedColumn = gridView1.Columns[_value];
        }
        #endregion

        #region shortcutKey
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            KeyEventArgs e = new KeyEventArgs(keyData);
            if (e.KeyCode == Keys.F1)
            {
                buttonItem1_Click(null, null);
            }
            else if (e.KeyCode == Keys.F6)
            {
                FocusCol();
            }
            else if (e.KeyCode == Keys.S && e.Control)
            {
                Save_Data(true); return true;
            }
            else if (e.KeyCode == Keys.Q && e.Control)
            {
                buttonItem9_Click(null, null);
            }
            else if (e.KeyCode == Keys.F10)
            {
                _unit.Get_AllowEdit(gridView1);
            }
            else if (e.KeyCode == Keys.F4)
            {
                buttonItem3_Click(null, null);
            }
            return base.ProcessCmdKey(ref msg, keyData);
        }
        #endregion
    }
}