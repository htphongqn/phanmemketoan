using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using DevComponents.DotNetBar;
using ketoansoft.app.Class.Data;
using DevExpress.XtraEditors;
using ketoansoft.app.Components.clsVproUtility;
using System.Collections;

namespace ketoansoft.app
{
    public partial class fCaiThongSo : DevComponents.DotNetBar.Metro.MetroForm
    {
        private dbVstoreAppDataContext _db = new dbVstoreAppDataContext();
        private CFGRepo _CFGRepo = new CFGRepo();
        private List<int> _listUpdate = new List<int>();

        public fCaiThongSo()
        {
            InitializeComponent();
        }

        #region Data
        private void Load_Data()
        {
            try
            {
                gridData.DataSource = _CFGRepo.GetAll();
            }
            catch (Exception) { }
        }
        private void Save_Data()
        {
            try
            {
                int i = 0;
                foreach (int pos in _listUpdate)
                {
                    CFG obj = new CFG();
                    obj.ID = Utils.CIntDef(gridView1.GetRowCellValue(pos, "ID").ToString(), 0);
                    obj.TEN = gridView1.GetRowCellValue(pos, "TEN").ToString();
                    obj.GIA_TRI = gridView1.GetRowCellValue(pos, "GIA_TRI").ToString();
                    obj.GHI_CHU = gridView1.GetRowCellValue(pos, "GHI_CHU").ToString();
                    _CFGRepo.Update(obj);
                    i++;
                }
                _listUpdate = new List<int>();
                if (i > 0)
                {
                    MessageBox.Show("Lưu thành công!", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }            
        }
        private void Remove_Data()
        {
            try
            {
                if (_listUpdate.Count > 0)
                {
                    MessageBox.Show("Hãy thực hiện lưu trước khi xóa!", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                int Id = Utils.CIntDef(gridView1.GetRowCellValue(gridView1.FocusedRowHandle, "ID").ToString(), 0);
                _CFGRepo.Remove(Id);

                MessageBox.Show("Xóa dòng ID:" + Id + " thành công!", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Load_Data();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion

        #region Event
        private void gridData_Load(object sender, EventArgs e)
        {
            Load_Data();
        }
        private void gridView1_InvalidRowException(object sender, DevExpress.XtraGrid.Views.Base.InvalidRowExceptionEventArgs e)
        {
            // Sự kiện này để người ta không chuyển qua dòng khác được khi có lỗi xảy ra nè
            // Nó nhận giá trị e.Valid của gridView1_ValidateRow để ứng xử
            // neu e,Valid =True thì nó cho chuyển qua dòng khác hoặc làm tác vụ khác
            // và ngược lại
             e.ExceptionMode = DevExpress.XtraEditors.Controls.ExceptionMode.NoAction;
        }
        private void gridView1_CellValueChanged(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {
            BeginInvoke(new MethodInvoker(delegate
            {
                if (_listUpdate.Find(a=>a == gridView1.FocusedRowHandle) != gridView1.FocusedRowHandle)
                {
                    _listUpdate.Add(gridView1.FocusedRowHandle);
                }
            }));
        }
        #endregion

        #region Button
        private void btnSave_Click(object sender, EventArgs e)
        {
            Save_Data();
        }
        private void buttonItem9_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Bạn có muốn thoát không?", "Hỏi", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
            {
                this.Close();
            }
        }
        private void buttonItem1_Click(object sender, EventArgs e)
        {
            gridView1.ShowFindPanel();
        }
        private void buttonItem8_Click(object sender, EventArgs e)
        {
            Remove_Data();
        }
        #endregion

        
    }
}